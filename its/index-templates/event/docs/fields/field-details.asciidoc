[[ecs-base]]
=== Base Fields

The `base` field set contains all fields which are at the root of the events. These fields are common across all types of events.

[discrete]
==== Base Field Details

[options="header"]
|=====
| Field  | Description | Level

// ===============================================================

|
[[field-timestamp]]
<<field-timestamp, @timestamp>>

a| Date/time when the event originated.

This is the date/time extracted from the event, typically representing when the event was generated by the source.

If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.

Required field for all events.

type: date



example: `2016-05-23T08:05:34.853Z`

| core

// ===============================================================

|
[[field-labels]]
<<field-labels, labels>>

a| Custom key/value pairs.

Can be used to add meta information to events. Should not contain nested objects. All values are stored as keyword.

Example: `docker` and `k8s` labels.

type: object



example: `{"application": "foo-bar", "env": "production"}`

| core

// ===============================================================

|
[[field-message]]
<<field-message, message>>

a| For log events the message field contains the log message, optimized for viewing in a log viewer.

For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.

If multiple messages exist, they can be combined into one message.

type: match_only_text



example: `Hello World`

| core

// ===============================================================

|
[[field-tags]]
<<field-tags, tags>>

a| List of keywords used to tag each event.

type: keyword


Note: this field should contain an array of values.



example: `["production", "env2"]`

| core

// ===============================================================

|=====


[[ecs-client]]
=== Client Fields

A client is defined as the initiator of a network connection for events regarding sessions, connections, or bidirectional flow records.

For TCP events, the client is the initiator of the TCP connection that sends the SYN packet(s). For other protocols, the client is generally the initiator or requestor in the network transaction. Some systems use the term "originator" to refer the client in TCP connections. The client fields describe details about the system acting as the client in the network event. Client fields are usually populated in conjunction with server fields. Client fields are generally not populated for packet-level events.

Client / server representations can add semantic context to an exchange, which is helpful to visualize the data in certain situations. If your context falls in that category, you should still ensure that source and destination are filled appropriately.

[discrete]
==== Client Field Details

[options="header"]
|=====
| Field  | Description | Level

// ===============================================================

|
[[field-client-address]]
<<field-client-address, client.address>>

a| Some event client addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.

Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.

type: keyword





| extended

// ===============================================================

|
[[field-client-bytes]]
<<field-client-bytes, client.bytes>>

a| Bytes sent from the client to the server.

type: long



example: `184`

| core

// ===============================================================

|
[[field-client-domain]]
<<field-client-domain, client.domain>>

a| The domain name of the client system.

This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.

type: keyword



example: `foo.example.com`

| core

// ===============================================================

|
[[field-client-ip]]
<<field-client-ip, client.ip>>

a| IP address of the client (IPv4 or IPv6).

type: ip





| core

// ===============================================================

|
[[field-client-mac]]
<<field-client-mac, client.mac>>

a| MAC address of the client.

The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.

type: keyword



example: `00-00-5E-00-53-23`

| core

// ===============================================================

|
[[field-client-nat-ip]]
<<field-client-nat-ip, client.nat.ip>>

a| Translated IP of source based NAT sessions (e.g. internal client to internet).

Typically connections traversing load balancers, firewalls, or routers.

type: ip





| extended

// ===============================================================

|
[[field-client-nat-port]]
<<field-client-nat-port, client.nat.port>>

a| Translated port of source based NAT sessions (e.g. internal client to internet).

Typically connections traversing load balancers, firewalls, or routers.

type: long





| extended

// ===============================================================

|
[[field-client-packets]]
<<field-client-packets, client.packets>>

a| Packets sent from the client to the server.

type: long



example: `12`

| core

// ===============================================================

|
[[field-client-port]]
<<field-client-port, client.port>>

a| Port of the client.

type: long





| core

// ===============================================================

|
[[field-client-registered-domain]]
<<field-client-registered-domain, client.registered_domain>>

a| The highest registered client domain, stripped of the subdomain.

For example, the registered domain for "foo.example.com" is "example.com".

This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".

type: keyword



example: `example.com`

| extended

// ===============================================================

|
[[field-client-subdomain]]
<<field-client-subdomain, client.subdomain>>

a| The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.

For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.

type: keyword



example: `east`

| extended

// ===============================================================

|
[[field-client-top-level-domain]]
<<field-client-top-level-domain, client.top_level_domain>>

a| The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".

This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".

type: keyword



example: `co.uk`

| extended

// ===============================================================

|=====

[discrete]
==== Field Reuse

[[ecs-client-nestings]]
[discrete]
===== Field sets that can be nested under Client

[options="header"]
|=====
| Location | Field Set | Description

// ===============================================================


| `client.as.*`
| <<ecs-as,as>>
| Fields describing an Autonomous System (Internet routing prefix).

// ===============================================================


| `client.geo.*`
| <<ecs-geo,geo>>
| Fields describing a location.

// ===============================================================


| `client.user.*`
| <<ecs-user,user>>
| Fields to describe the user relevant to the event.

// ===============================================================


|=====


[[ecs-device]]
=== Device Fields

Fields that describe a device instance and its characteristics.  Data collected for applications and processes running on a (mobile) device can be enriched with these fields to describe the identity, type and other characteristics of the device.

This field group definition is based on the Device namespace of the OpenTelemetry Semantic Conventions (https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/device/).

beta::[ These fields are in beta and are subject to change.]

[discrete]
==== Device Field Details

[options="header"]
|=====
| Field  | Description | Level

// ===============================================================

|
[[field-device-id]]
<<field-device-id, device.id>>

a| The unique identifier of a device. The identifier must not change across application sessions but stay fixed for an instance of a (mobile) device. 

On iOS, this value must be equal to the vendor identifier (https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android, this value must be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application.

For GDPR and data protection law reasons this identifier should not carry information that would allow to identify a user.

type: keyword



example: `00000000-54b3-e7c7-0000-000046bffd97`

| extended

// ===============================================================

|
[[field-device-manufacturer]]
<<field-device-manufacturer, device.manufacturer>>

a| The vendor name of the device manufacturer.

type: keyword



example: `Samsung`

| extended

// ===============================================================

|
[[field-device-model-identifier]]
<<field-device-model-identifier, device.model.identifier>>

a| The machine readable identifier of the device model.

type: keyword



example: `SM-G920F`

| extended

// ===============================================================

|
[[field-device-model-name]]
<<field-device-model-name, device.model.name>>

a| The human readable marketing name of the device model.

type: keyword



example: `Samsung Galaxy S6`

| extended

// ===============================================================

|=====

[discrete]
==== Field Reuse

[[ecs-device-nestings]]
[discrete]
===== Field sets that can be nested under Device

[options="header"]
|=====
| Location | Field Set | Description

// ===============================================================


| `device.its.*`
| <<ecs-its_device,its_device>>
| Custom Device ITS field

// ===============================================================


| `device.its.network.*`
| <<ecs-its_network,its_network>>
| Custom Campaign ITS field

// ===============================================================


| `device.its.screen.*`
| <<ecs-its_screen,its_screen>>
| Custom Screen ITS field

// ===============================================================


|=====


[[ecs-ecs]]
=== ECS Fields

Meta-information specific to ECS.

[discrete]
==== ECS Field Details

[options="header"]
|=====
| Field  | Description | Level

// ===============================================================

|
[[field-ecs-version]]
<<field-ecs-version, ecs.version>>

a| ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.

When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.

type: keyword



example: `1.0.0`

| core

// ===============================================================

|=====


[[ecs-event]]
=== Event Fields

The event fields are used for context information about the log or metric event itself.

A log is defined as an event containing details of something that happened. Log events must include the time at which the thing happened. Examples of log events include a process starting on a host, a network packet being sent from a source to a destination, or a network connection between a client and a server being initiated or closed. A metric is defined as an event containing one or more numerical measurements and the time at which the measurement was taken. Examples of metric events include memory pressure measured on a host and device temperature. See the `event.kind` definition in this section for additional details about metric and state events.

[discrete]
==== Event Field Details

[options="header"]
|=====
| Field  | Description | Level

// ===============================================================

|
[[field-event-action]]
<<field-event-action, event.action>>

a| The action captured by the event.

This describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.

type: keyword



example: `user-password-change`

| core

// ===============================================================

|
[[field-event-agent-id-status]]
<<field-event-agent-id-status, event.agent_id_status>>

a| Agents are normally responsible for populating the `agent.id` field value. If the system receiving events is capable of validating the value based on authentication information for the client then this field can be used to reflect the outcome of that validation.

For example if the agent's connection is authenticated with mTLS and the client cert contains the ID of the agent to which the cert was issued then the `agent.id` value in events can be checked against the certificate. If the values match then `event.agent_id_status: verified` is added to the event, otherwise one of the other allowed values should be used.

If no validation is performed then the field should be omitted.

The allowed values are:

`verified` - The `agent.id` field value matches expected value obtained from auth metadata.

`mismatch` - The `agent.id` field value does not match the expected value obtained from auth metadata.

`missing` - There was no `agent.id` field in the event to validate.

`auth_metadata_missing` - There was no auth metadata or it was missing information about the agent ID.

type: keyword



example: `verified`

| extended

// ===============================================================

|
[[field-event-category]]
<<field-event-category, event.category>>

a| This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.

`event.category` represents the "big buckets" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type`, which is used as a subcategory.

This field is an array. This will allow proper categorization of some events that fall in multiple categories.

type: keyword


Note: this field should contain an array of values.




*Important*: The field value must be one of the following:

api, authentication, configuration, database, driver, email, file, host, iam, intrusion_detection, library, malware, network, package, process, registry, session, threat, vulnerability, web

To learn more about when to use which value, visit the page
<<ecs-allowed-values-event-category,allowed values for event.category>>


| core

// ===============================================================

|
[[field-event-code]]
<<field-event-code, event.code>>

a| Identification code for this event, if one exists.

Some event sources use event codes to identify messages unambiguously, regardless of message language or wording adjustments over time. An example of this is the Windows Event ID.

type: keyword



example: `4648`

| extended

// ===============================================================

|
[[field-event-created]]
<<field-event-created, event.created>>

a| `event.created` contains the date/time when the event was first read by an agent, or by your pipeline.

This field is distinct from `@timestamp` in that `@timestamp` typically contain the time extracted from the original event.

In most situations, these two timestamps will be slightly different. The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it. This can be used to monitor your agent's or pipeline's ability to keep up with your event source.

In case the two timestamps are identical, `@timestamp` should be used.

type: date



example: `2016-05-23T08:05:34.857Z`

| core

// ===============================================================

|
[[field-event-dataset]]
<<field-event-dataset, event.dataset>>

a| Name of the dataset.

If an event source publishes more than one type of log or events (e.g. access log, error log), the dataset is used to specify which one the event comes from.

It's recommended but not required to start the dataset name with the module name, followed by a dot, then the dataset name.

type: keyword



example: `apache.access`

| core

// ===============================================================

|
[[field-event-duration]]
<<field-event-duration, event.duration>>

a| Duration of the event in nanoseconds.

If `event.start` and `event.end` are known this value should be the difference between the end and start time.

type: long





| core

// ===============================================================

|
[[field-event-end]]
<<field-event-end, event.end>>

a| `event.end` contains the date when the event ended or when the activity was last observed.

type: date





| extended

// ===============================================================

|
[[field-event-hash]]
<<field-event-hash, event.hash>>

a| Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate log integrity.

type: keyword



example: `123456789012345678901234567890ABCD`

| extended

// ===============================================================

|
[[field-event-id]]
<<field-event-id, event.id>>

a| Unique ID to describe the event.

type: keyword



example: `8a4f500d`

| core

// ===============================================================

|
[[field-event-ingested]]
<<field-event-ingested, event.ingested>>

a| Timestamp when an event arrived in the central data store.

This is different from `@timestamp`, which is when the event originally occurred.  It's also different from `event.created`, which is meant to capture the first time an agent saw the event.

In normal conditions, assuming no tampering, the timestamps should chronologically look like this: `@timestamp` < `event.created` < `event.ingested`.

type: date



example: `2016-05-23T08:05:35.101Z`

| core

// ===============================================================

|
[[field-event-kind]]
<<field-event-kind, event.kind>>

a| This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.

`event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.

The value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data is coming in at a regular interval or not.

type: keyword




*Important*: The field value must be one of the following:

alert, asset, enrichment, event, metric, state, pipeline_error, signal

To learn more about when to use which value, visit the page
<<ecs-allowed-values-event-kind,allowed values for event.kind>>


| core

// ===============================================================

|
[[field-event-module]]
<<field-event-module, event.module>>

a| Name of the module this data is coming from.

If your monitoring agent supports the concept of modules or plugins to process events of a given source (e.g. Apache logs), `event.module` should contain the name of this module.

type: keyword



example: `apache`

| core

// ===============================================================

|
[[field-event-original]]
<<field-event-original, event.original>>

a| Raw text message of entire event. Used to demonstrate log integrity or where the full log message (before splitting it up in multiple parts) may be required, e.g. for reindex.

This field is not indexed and doc_values are disabled. It cannot be searched, but it can be retrieved from `_source`. If users wish to override this and index this field, please see `Field data types` in the `Elasticsearch Reference`.

type: keyword



example: `Sep 19 08:26:10 host CEF:0&#124;Security&#124; threatmanager&#124;1.0&#124;100&#124; worm successfully stopped&#124;10&#124;src=10.0.0.1 dst=2.1.2.2spt=1232`

| core

// ===============================================================

|
[[field-event-outcome]]
<<field-event-outcome, event.outcome>>

a| This is one of four ECS Categorization Fields, and indicates the lowest level in the ECS category hierarchy.

`event.outcome` simply denotes whether the event represents a success or a failure from the perspective of the entity that produced the event.

Note that when a single transaction is described in multiple events, each event may populate different values of `event.outcome`, according to their perspective.

Also note that in the case of a compound event (a single event that contains multiple logical events), this field should be populated with the value that best captures the overall success or failure from the perspective of the event producer.

Further note that not all events will have an associated outcome. For example, this field is generally not populated for metric events, events with `event.type:info`, or any events for which an outcome does not make logical sense.

type: keyword




*Important*: The field value must be one of the following:

failure, success, unknown

To learn more about when to use which value, visit the page
<<ecs-allowed-values-event-outcome,allowed values for event.outcome>>


| core

// ===============================================================

|
[[field-event-provider]]
<<field-event-provider, event.provider>>

a| Source of the event.

Event transports such as Syslog or the Windows Event Log typically mention the source of an event. It can be the name of the software that generated the event (e.g. Sysmon, httpd), or of a subsystem of the operating system (kernel, Microsoft-Windows-Security-Auditing).

type: keyword



example: `kernel`

| extended

// ===============================================================

|
[[field-event-reason]]
<<field-event-reason, event.reason>>

a| Reason why this event happened, according to the source.

This describes the why of a particular action or outcome captured in the event. Where `event.action` captures the action from the event, `event.reason` describes why that action was taken. For example, a web proxy with an `event.action` which denied the request may also populate `event.reason` with the reason why (e.g. `blocked site`).

type: keyword



example: `Terminated an unexpected process`

| extended

// ===============================================================

|
[[field-event-reference]]
<<field-event-reference, event.reference>>

a| Reference URL linking to additional information about this event.

This URL links to a static definition of this event. Alert events, indicated by `event.kind:alert`, are a common use case for this field.

type: keyword



example: `https://system.example.com/event/#0001234`

| extended

// ===============================================================

|
[[field-event-risk-score]]
<<field-event-risk-score, event.risk_score>>

a| Risk score or priority of the event (e.g. security solutions). Use your system's original value here.

type: float





| core

// ===============================================================

|
[[field-event-risk-score-norm]]
<<field-event-risk-score-norm, event.risk_score_norm>>

a| Normalized risk score or priority of the event, on a scale of 0 to 100.

This is mainly useful if you use more than one system that assigns risk scores, and you want to see a normalized value across all systems.

type: float





| extended

// ===============================================================

|
[[field-event-sequence]]
<<field-event-sequence, event.sequence>>

a| Sequence number of the event.

The sequence number is a value published by some event sources, to make the exact ordering of events unambiguous, regardless of the timestamp precision.

type: long





| extended

// ===============================================================

|
[[field-event-severity]]
<<field-event-severity, event.severity>>

a| The numeric severity of the event according to your event source.

What the different severity values mean can be different between sources and use cases. It's up to the implementer to make sure severities are consistent across events from the same source.

The Syslog severity belongs in `log.syslog.severity.code`. `event.severity` is meant to represent the severity according to the event source (e.g. firewall, IDS). If the event source does not publish its own severity, you may optionally copy the `log.syslog.severity.code` to `event.severity`.

type: long



example: `7`

| core

// ===============================================================

|
[[field-event-start]]
<<field-event-start, event.start>>

a| `event.start` contains the date when the event started or when the activity was first observed.

type: date





| extended

// ===============================================================

|
[[field-event-timezone]]
<<field-event-timezone, event.timezone>>

a| This field should be populated when the event's timestamp does not include timezone information already (e.g. default Syslog timestamps). It's optional otherwise.

Acceptable timezone formats are: a canonical ID (e.g. "Europe/Amsterdam"), abbreviated (e.g. "EST") or an HH:mm differential (e.g. "-05:00").

type: keyword





| extended

// ===============================================================

|
[[field-event-type]]
<<field-event-type, event.type>>

a| This is one of four ECS Categorization Fields, and indicates the third level in the ECS category hierarchy.

`event.type` represents a categorization "sub-bucket" that, when used along with the `event.category` field values, enables filtering events down to a level appropriate for single visualization.

This field is an array. This will allow proper categorization of some events that fall in multiple event types.

type: keyword


Note: this field should contain an array of values.




*Important*: The field value must be one of the following:

access, admin, allowed, change, connection, creation, deletion, denied, end, error, group, indicator, info, installation, protocol, start, user

To learn more about when to use which value, visit the page
<<ecs-allowed-values-event-type,allowed values for event.type>>


| core

// ===============================================================

|
[[field-event-url]]
<<field-event-url, event.url>>

a| URL linking to an external system to continue investigation of this event.

This URL links to another system where in-depth investigation of the specific occurrence of this event can take place. Alert events, indicated by `event.kind:alert`, are a common use case for this field.

type: keyword



example: `https://mysystem.example.com/alert/5271dedb-f5b0-4218-87f0-4ac4870a38fe`

| extended

// ===============================================================

|=====

[discrete]
==== Field Reuse

[[ecs-event-nestings]]
[discrete]
===== Field sets that can be nested under Event

[options="header"]
|=====
| Location | Field Set | Description

// ===============================================================


| `event.its.*`
| <<ecs-its_event,its_event>>
| Custom Event ITS field

// ===============================================================


|=====


[[ecs-related]]
=== Related Fields

This field set is meant to facilitate pivoting around a piece of data.

Some pieces of information can be seen in many places in an ECS event. To facilitate searching for them, store an array of all seen values to their corresponding field in `related.`.

A concrete example is IP addresses, which can be under host, observer, source, destination, client, server, and network.forwarded_ip. If you append all IPs to `related.ip`, you can then search for a given IP trivially, no matter where it appeared, by querying `related.ip:192.0.2.15`.

[discrete]
==== Related Field Details

[options="header"]
|=====
| Field  | Description | Level

// ===============================================================

|
[[field-related-hash]]
<<field-related-hash, related.hash>>

a| All the hashes seen on your event. Populating this field, then using it to search for hashes can help in situations where you're unsure what the hash algorithm is (and therefore which key name to search).

type: keyword


Note: this field should contain an array of values.





| extended

// ===============================================================

|
[[field-related-hosts]]
<<field-related-hosts, related.hosts>>

a| All hostnames or other host identifiers seen on your event. Example identifiers include FQDNs, domain names, workstation names, or aliases.

type: keyword


Note: this field should contain an array of values.





| extended

// ===============================================================

|
[[field-related-ip]]
<<field-related-ip, related.ip>>

a| All of the IPs seen on your event.

type: ip


Note: this field should contain an array of values.





| extended

// ===============================================================

|
[[field-related-user]]
<<field-related-user, related.user>>

a| All the user names or other user identifiers seen on the event.

type: keyword


Note: this field should contain an array of values.





| extended

// ===============================================================

|=====


